<Window x:Class="Cloudmp3.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:conv="clr-namespace:Cloudmp3.ValueConverters"
        xmlns:comm="clr-namespace:Cloudmp3.Commands"
        Title="Cloud Sound" Height="660" Width="855" MinWidth="855" Background="#FFF1F1F1">
    <Window.Resources>
        <Style TargetType="Button" x:Key="Mp3Buttons">
            <Setter Property="Height" Value="30"/>
            <Setter Property="Width" Value="30"/>
            <!--<Setter Property="Margin" Value="5,5"/>-->
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="Chrome" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="#ADADAD"/>
                                <Setter Property="Opacity" TargetName="Chrome" Value="0.5"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="Label" x:Key="Timer">
            <Setter Property="Width" Value="45"/>
            <Setter Property="Margin" Value="5,0"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
        </Style>
        <Style x:Key="Volume" TargetType="{x:Type Slider}">
            <Setter Property="Background" Value="#7F000000"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Slider}">
                        <ControlTemplate.Resources>
                            <Style TargetType="{x:Type RepeatButton}">
                                <Setter Property="OverridesDefaultStyle" Value="true"/>
                                <Setter Property="IsTabStop" Value="false"/>
                                <Setter Property="Focusable" Value="false"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                                            <Border Background="{TemplateBinding Background}"/>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                            <PathGeometry x:Key="Triangle">
                                <PathFigure StartPoint="0,1">
                                    <LineSegment Point="1,1"/>
                                    <LineSegment Point="1,0"/>
                                    <LineSegment Point="0,1"/>
                                </PathFigure>
                            </PathGeometry>
                        </ControlTemplate.Resources>
                        <Grid>
                            <Grid>
                                <Grid.OpacityMask>
                                    <DrawingBrush>
                                        <DrawingBrush.Drawing>
                                            <GeometryDrawing Brush="Black" Geometry="{StaticResource Triangle}"/>
                                        </DrawingBrush.Drawing>
                                    </DrawingBrush>
                                </Grid.OpacityMask>
                                <Track Name="PART_Track" Value="{TemplateBinding Value}">
                                    <Track.Thumb>
                                        <Thumb Width="10" Background="{TemplateBinding Background}">
                                            <Thumb.Template>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Border Background="{TemplateBinding Background}"/>
                                                </ControlTemplate>
                                            </Thumb.Template>
                                        </Thumb>
                                    </Track.Thumb>
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Background="{TemplateBinding Background}" Command="Slider.DecreaseLarge"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Background="Transparent" Command="Slider.IncreaseLarge"/>
                                    </Track.IncreaseRepeatButton>
                                </Track>
                            </Grid>
                            <Path
                        Data="{StaticResource Triangle}"
                        Stretch="Fill"
                        Stroke="Black"
                        StrokeThickness="1"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <DataTemplate x:Key="PlaylistList">
            <StackPanel Orientation="Horizontal">
                <Label Content="{Binding Path=P_Name}"/>
            </StackPanel>
        </DataTemplate>
        <Image x:Key="PlayImg" Source="/Images/Play.png"/>
        <Image x:Key="StopImg" Source="/Images/Stop.png"/>
        <Image x:Key="PrevImg" Source="/Images/Previous.png"/>
        <Image x:Key="NextImg" Source="/Images/Next.png"/>
        <conv:MetaDataDurationConverter x:Key="MilisToSec"/>
        <conv:TimerDurationConverter x:Key="TimerConverter"/>
        <conv:VolumeBarConverter x:Key="VolConverter"/>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="{x:Static comm:Commands.Login}"
                        CanExecute="LoginCanExecute"
                        Executed="LoginExecuted"/>
        <CommandBinding Command="{x:Static comm:Commands.Logout}"
                        CanExecute="LogoutCanExecute"
                        Executed="LogoutExecuted"/>
        <CommandBinding Command="{x:Static comm:Commands.DownloadSong}"
                        CanExecute="DownloadSongCanExecute"
                        Executed="DownloadSongExecuted"/>
        <CommandBinding Command="{x:Static comm:Commands.UploadSong}"
                        CanExecute="UploadSongCanExecute"
                        Executed="UploadSongExecuted"/>
        <CommandBinding Command="{x:Static comm:Commands.Play}"
                        CanExecute="PlayCanExecute"
                        Executed="PlayExecuted"/>
        <CommandBinding Command="{x:Static comm:Commands.Stop}"
                        CanExecute="StopCanExecute"
                        Executed="StopExecuted"/>
        <CommandBinding Command="{x:Static comm:Commands.Next}"
                        CanExecute="NextCanExecute"
                        Executed="NextExecuted"/>
        <CommandBinding Command="{x:Static comm:Commands.Prev}"
                        CanExecute="PrevCanExecute"
                        Executed="PrevExecuted"/>
    </Window.CommandBindings>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="300"/>
            <ColumnDefinition Width="540"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="35"/>
            <RowDefinition Height="590"/>
        </Grid.RowDefinitions>
        <Menu Grid.ColumnSpan="2">
            <MenuItem Header="Account">
                <MenuItem Header="Log In"
                          Command="{x:Static comm:Commands.Login}"/>
                <MenuItem Header="Log Out"
                          Command="{x:Static comm:Commands.Logout}"/>
            </MenuItem>
            <MenuItem Header="Songs">
                <MenuItem Header="Upload Song"
                          Command="{x:Static comm:Commands.UploadSong}"/>
                <MenuItem Header="Download Song"
                          Command="{x:Static comm:Commands.DownloadSong}"/>
            </MenuItem>
        </Menu>
        <StackPanel Orientation="Horizontal" Grid.Column="1" x:Name="PlayerGrid">
            <Button x:Name="PlayButton" Content="{StaticResource PlayImg}" Command="{x:Static comm:Commands.Play}"
                            Style="{StaticResource Mp3Buttons}"/>
            <Button x:Name="StopButton" Content="{StaticResource StopImg}" Command="{x:Static comm:Commands.Stop}"
                           Style="{StaticResource Mp3Buttons}"/>
            <Button x:Name="PreviousButton" Content="{StaticResource PrevImg}" Command="{x:Static comm:Commands.Prev}"
                            Style="{StaticResource Mp3Buttons}"/>
            <Button x:Name="NextButton" Content="{StaticResource NextImg}" Command="{x:Static comm:Commands.Next}"
                            Style="{StaticResource Mp3Buttons}"/>
            <Slider Style="{StaticResource Volume}" Width="100" Minimum="0" Maximum="100"
                    TickFrequency="1"
                    IsSnapToTickEnabled="True" Value="{Binding Path=Volume, Converter={StaticResource VolConverter}}"/>
            <Label x:Name="CurrentTime"
                               Content="{Binding Path=ElapsedMiliseconds, Converter={StaticResource TimerConverter}}"
                               Width="45"
                               Margin="5,0"
                               HorizontalContentAlignment="Center"
                               VerticalAlignment="Center"/>
            <ProgressBar Width="220" Minimum="0" Maximum="1000" Value="{Binding Path=SongProgress}"
                               HorizontalAlignment="Center"
                               Height="15"
                               x:Name="SongBar"
                               VerticalAlignment="Center"/>
            <Label x:Name="TotalTime" 
                               Content="{Binding Path=SongLength, Converter={StaticResource TimerConverter}}"
                               HorizontalAlignment="Right"
                               VerticalContentAlignment="Center"/>
        </StackPanel>
        <Border Grid.Row="1" Grid.Column="1">
            <StackPanel Background="Black" Margin="5" Height="580" Width="530">
                <DataGrid x:Name="SongDataGrid" SelectionMode="Single" MaxWidth="530" Height="580"
                              IsReadOnly="True" AutoGenerateColumns="False"
                          HeadersVisibility="Column" Background="Transparent"
                          VerticalGridLinesBrush="Transparent" CanUserResizeColumns="False"
                          HorizontalScrollBarVisibility="Disabled" BorderBrush="Transparent">
                    <DataGrid.Resources>
                        <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" 
                                        Color="Transparent"/>
                        <!--<SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" 
                                        Color="Transparent"/>-->
                        <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
                                         Color="Transparent"/>
                        <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}"
                                         Color="White"/>
                        <Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
                            <Setter Property="Grid.ColumnSpan" Value="2" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                                        <Grid>
                                            <DataGridColumnHeader IsHitTestVisible="False" Name="PART_FillerColumnHeader"/>
                                            <ItemsPresenter/>
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                        <Style TargetType="DataGridRow">
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="true">
                                    <Setter Property="BorderBrush" Value="Gold" />
                                    <Setter Property="BorderThickness" Value="1" />
                                </Trigger>
                            </Style.Triggers>
                            <Setter Property="Background" Value="Transparent"/>
                            <Setter Property="Foreground" Value="White"/>
                            <EventSetter Event="MouseDoubleClick" Handler="Song_MouseDoubleClick"/>
                        </Style>
                        <Style TargetType="DataGridCellsPresenter">
                            <Setter Property="BorderBrush" Value="Transparent"/>
                        </Style>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridTextColumn Header="Artist" Binding="{Binding S_Artist}"
                                            Width="160"/>
                        <DataGridTextColumn Header="Title" Binding="{Binding S_Title}"
                                            Width="303"/>
                        <DataGridTextColumn Header="Length" 
                                            Binding="{Binding S_Length, Converter={StaticResource MilisToSec}}">
                            <DataGridTextColumn.HeaderStyle>
                                <Style TargetType="DataGridColumnHeader">
                                    <Setter Property="HorizontalContentAlignment"
                                        Value="Center" />
                                </Style>
                            </DataGridTextColumn.HeaderStyle>
                            <DataGridTextColumn.CellStyle>
                                <Style>
                                    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
                                </Style>
                            </DataGridTextColumn.CellStyle>
                        </DataGridTextColumn>
                    </DataGrid.Columns>
                    <DataGrid.ContextMenu>
                        <ContextMenu>
                            <MenuItem Header="Add to Existing Playlist" Click="AddSongToPlaylist_Click"/>
                            <!--<MenuItem Header="Remove from Playlist" Click="RemoveSongFromPlaylist_Click"/>-->
                        </ContextMenu>
                    </DataGrid.ContextMenu>
                </DataGrid>
                <!--<Popup x:Name="AddSongToPlaylistPopup" IsOpen="False" Placement="Center">
                    <Grid Background="BlanchedAlmond">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ComboBox Grid.Row="0" x:Name="ChoosePlaylist" ItemsSource="{Binding ElementName=PlaylistBox, Path=ItemsSource}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <Label Content="{Binding Path=P_Name}"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                        <StackPanel Orientation="Horizontal" Grid.Row="1">
                            <Button Click="AddToPlaylist_Click">Add Playlist</Button>
                            <Button Click="CloseAddSongToPlaylistPopup_Click">Cancel</Button>
                        </StackPanel>
                    </Grid>
                </Popup>-->
                <StackPanel x:Name="Prog"
                            Background="Yellow">
                    <StackPanel x:Name="prog">
                        <ProgressBar x:Name="progbar" Height="20" Width="200" IsIndeterminate="False" Value="0" Margin="10"/>
                        <Label x:Name="proglab" Height="25" Width="105" Content="{Binding ElementName=progbar, Path=Value, Mode=TwoWay}" Margin="10"/>
                        <Button x:Name="Hidbuton" Height="20" Width="100" Content="Hide" Click="Hide_Click"/>
                    </StackPanel>
                </StackPanel>
            </StackPanel>
            </Border>
            <StackPanel Grid.Row="1">
            <StackPanel x:Name="NotificationsPanel">
                <Label x:Name="NotificationsLabel"
                    Content="{Binding notificatioN}"
                     />
            </StackPanel>
            <Button Content="Song Library" Click="Collection_Click"/>
            <Button Content="Add Playlist" Click="AddPlaylistPopup_Click"/>
            <ListBox x:Name="PlaylistBox" ItemsSource="{Binding Path=userPlaylists}"
                     SelectionChanged="PlaylistBox_SelectionChanged">            
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <Label Content="{Binding Path=P_Name}"/>
                    </DataTemplate>
                </ListBox.ItemTemplate>
                <ListBox.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Rename Playlist" Click="RenamePlaylist_Click"/>
                        <MenuItem Header="Remove Playlist" Click="RemovePlaylist_Click"/>
                    </ContextMenu>
                </ListBox.ContextMenu>
            </ListBox>
        </StackPanel>
        
    </Grid>
</Window>
